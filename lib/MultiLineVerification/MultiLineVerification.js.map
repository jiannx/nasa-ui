{"version":3,"sources":["../../components/MultiLineVerification/MultiLineVerification.jsx"],"names":["React","Component","Tag","Tooltip","_","MultiLineVerification","props","onVerify","debounce","list","result","text","push","success","error","tips","state","value","rows","verifyResult","nextProps","setState","e","target","split","self","AnotherPlaceholder","isArray","placeholder","slice","map","x","i","top","className","height","length","onTextareaChange","bind","defaultProps"],"mappings":"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","file":"MultiLineVerification.js","sourcesContent":["/*\r\n!!! 弃用\r\n<MultiLineVerification \r\n  verifyResult={this.state.result} \r\n  onVerify={this.onVerify.bind(this)}\r\n  placeholder={['http://example.com/test', 'http://example.com/test.png']} \r\n/>\r\n*/\r\nimport React, { Component } from 'react';\r\nimport { Tag, Tooltip } from 'antd';\r\nimport _ from 'lodash';\r\nimport './MultiLineVerification.scss';\r\n\r\nclass MultiLineVerification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n      rows: [''],\r\n      verifyResult: []\r\n    };\r\n  }\r\n\r\n  static defaultProps = {\r\n    className: '',\r\n    placeholder: '', // 字符串或者数组\r\n    verifyResult: [], // 校验结果\r\n    onVerify: () => {}, // 校验函数 参数: items每行数据数组\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      verifyResult: nextProps.verifyResult\r\n    });\r\n  }\r\n\r\n  onVerify = _.debounce(function(list) {\r\n    let result = [];\r\n    for (let text of list) {\r\n      result.push({\r\n        text: text,\r\n        success: true,\r\n        error: '',\r\n        tips: ''\r\n      });\r\n    }\r\n    this.props.onVerify(result);\r\n  }, 500);\r\n\r\n  onTextareaChange(e) {\r\n    let list = e.target.value.split(/\\n/);\r\n    this.onVerify(list);\r\n    this.setState({\r\n      value: e.target.value,\r\n      rows: list,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n\r\n    function AnotherPlaceholder() {\r\n      if (self.state.value !== '' || _.isArray(self.props.placeholder) === false) {\r\n        return null;\r\n      }\r\n      if (_.isArray(self.props.placeholder)) {\r\n        return (\r\n          <span>{self.props.placeholder.slice(1).map((x, i) => \r\n            <div className=\"multi-line-placeholder\" key={`mult-line-placeholder-${i}`} style={{top: 32 * (i+1) + 'px'}}>{x}</div>\r\n          )}\r\n          </span>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={`nasa-multi-line ${this.props.className}`}>\r\n        <div className=\"multi-line-textarea\" style={{height: 32 * this.state.rows.length + 'px'}}>\r\n          <textarea onChange={this.onTextareaChange.bind(this)} \r\n            value={this.state.value} \r\n            placeholder={ _.isArray(this.props.placeholder) ? this.props.placeholder[0]: this.props.placeholder}>\r\n          </textarea>\r\n          {this.state.rows.map( (x, i) => {\r\n            let top = 32 * (i + 1) + 'px';\r\n            return (\r\n              <div className=\"multi-line-line\" style={{top}} key={i}></div>\r\n            )\r\n          })}\r\n          {this.state.verifyResult.map((x, i) => {\r\n            let top = 32 * (i + 1) + 'px';\r\n            return (\r\n              <div className={'multi-line-result ' + (x.success ? '': 'with-red-line')} \r\n                style={{top, 'display': i > this.state.rows.length - 1 ? 'none': 'block'}} \r\n                key={i + ' res'}\r\n              >\r\n                { x.success === false && \r\n                  <div className=\"multi-line-tooltip\">\r\n                    <Tooltip placement=\"right\" title={x.tips}>\r\n                      <Tag color=\"red\">{x.error}</Tag>\r\n                    </Tooltip>\r\n                  </div>\r\n                }\r\n              </div>\r\n            )\r\n          })}\r\n          <AnotherPlaceholder />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MultiLineVerification;\r\n"]}