{"version":3,"sources":["../../components/MultiLineVerification2/MultiLineVerification.jsx"],"names":["React","Component","_","htmlEncode","str","div","document","createElement","appendChild","createTextNode","innerHTML","MultiLineVerification","props","onSetValues","list","textarea","join","onVerify","setState","value","rows","debounce","debounceSec","onClear","innerText","state","values","verifyResult","html","nextProps","isEqual","e","target","split","length","pop","onChange","persist","setTimeout","willPaste","encodeList","map","x","splice","self","Placeholder","placeholderList","placeholder","isString","isArray","i","tips","render","className","focus","push","bind","onPaste","defaultProps","result","index"],"mappings":"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","file":"MultiLineVerification.js","sourcesContent":["/*\r\n<MultiLineVerification \r\n  verifyResult={this.state.result} \r\n  onVerify={this.onVerify.bind(this)}\r\n  placeholder={['http://example.com/test', 'http://example.com/test.png']} \r\n/>\r\n*/\r\nimport React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport './MultiLineVerification.scss';\r\n\r\nfunction htmlEncode(str) {\r\n  var div = document.createElement(\"div\");\r\n  div.appendChild(document.createTextNode(str));\r\n  return div.innerHTML;\r\n}\r\n\r\n\r\nclass MultiLineVerification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      values: props.values,\r\n      value: '',\r\n      rows: [''],\r\n      verifyResult: props.verifyResult, // object[] [{text: text,success: true,error: '',tips: ''}]\r\n      html: ''\r\n    };\r\n  }\r\n\r\n  static defaultProps = {\r\n    className: '',\r\n    placeholder: '', // 字符串或者数组\r\n    values: [],\r\n    render: (result, index) => {}, // 检验结果render函数\r\n    verifyResult: [], // 校验结果\r\n    onVerify: (list) => {}, // 校验函数 参数: items每行数据数组\r\n    debounceSec: 500, // 校验间隔时间\r\n    willPaste: (str) => str, // 黏贴前的数据处理\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (!_.isEqual(nextProps.verifyResult, this.props.verifyResult)) {\r\n      this.setState({\r\n        verifyResult: nextProps.verifyResult\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.values) {\r\n      this.onSetValues(this.props.values);\r\n    }\r\n  }\r\n\r\n  onSetValues = (list) => {\r\n    this.textarea.innerHTML = list.join('<br/>');\r\n    this.onVerify(list);\r\n    this.setState({\r\n      value: list.join('/n'),\r\n      rows: list,\r\n    });\r\n  }\r\n\r\n  onVerify = _.debounce(function(list) {\r\n    this.props.onVerify(list);\r\n  }, this.props.debounceSec);\r\n\r\n  onClear = () => {\r\n    this.textarea.innerText = '';\r\n    this.setState({\r\n      value: '',\r\n      rows: [],\r\n    });\r\n  }\r\n\r\n  onChange(e) {\r\n    let list = e.target.innerText.split(/\\n/);\r\n    if (list.length > 1 && list[list.length - 1] === '') {\r\n      list.pop();\r\n    }\r\n    this.setState({\r\n      value: e.target.innerText,\r\n      rows: list,\r\n    });\r\n    this.onVerify(list);\r\n    this.props.onChange && this.props.onChange(list);\r\n  }\r\n\r\n  onPaste(e, value) {\r\n    e.persist();\r\n    setTimeout(() => {\r\n      let str = this.props.willPaste(this.textarea.innerText);\r\n      let encodeList = str.split(/\\n/).map(x => htmlEncode(x));\r\n      if (encodeList.length > 0 && encodeList[encodeList.length - 1] === '') {\r\n        encodeList.splice(encodeList.length - 1, 1);\r\n      }\r\n      this.onSetValues(encodeList);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n\r\n    function Placeholder() {\r\n      let placeholderList = self.props.placeholder\r\n      if (self.state.rows.join() !== '') {\r\n        return null;\r\n      }\r\n      if (_.isString(placeholderList)) {\r\n        placeholderList = [placeholderList];\r\n      }\r\n      if (_.isArray(placeholderList)) {\r\n        return (\r\n          <div className=\"multi-line-placeholder-box\">\r\n            {placeholderList.map((x, i) => \r\n              <div className=\"multi-line-placeholder\" key={`mult-line-placeholder-${i}`}>{x}</div>\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"nasa-multi-line2\">\r\n        <div className=\"multi-line-result\">\r\n          {this.state.rows.map((x, i) => {\r\n            let tips = null;\r\n            if(this.state.verifyResult[i]){\r\n              tips = this.props.render(this.state.verifyResult[i], i);\r\n            }\r\n            let className = ['multi-line-result-row'];\r\n            if(this.state.verifyResult[i] && this.state.verifyResult[i].focus === true){\r\n              className.push('red');\r\n            }\r\n            return (\r\n              <div className={className.join(' ')} key={i+'res'}>\r\n                <span className=\"text\">{x}</span>\r\n                <div className=\"multi-line-tooltip\">\r\n                  {tips}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <div className={`multi-line-edit ${this.props.className}`}\r\n          contentEditable=\"true\"\r\n          onInput={this.onChange.bind(this)}\r\n          onPaste={this.onPaste.bind(this)}\r\n          ref={(textarea)=> { this.textarea = textarea;}}\r\n        >\r\n        </div>\r\n        <Placeholder />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MultiLineVerification;"]}