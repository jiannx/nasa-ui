{"version":3,"sources":["../../components/MultiLineVerification2/MultiLineVerification.by-textarea.jsx"],"names":["React","Component","InputEx","_","TextAreaEx","MultiLineVerification","props","onVerify","debounce","list","onChange","debounceSec","value","defaultValue","isArray","split","state","result","nextProps","isEqual","setState","e","target","RegExp","tokenSeparators","join","self","Placeholder","placeholderList","placeholder","isString","map","x","i","className","tips","resultRender","focus","push","bind","defaultProps","resultItem","index"],"mappings":"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","file":"MultiLineVerification.by-textarea.js","sourcesContent":["/*\r\n基于textare 实现 多行为本校验功能\r\n\r\n参数：\r\nclassName: '', // String 类名 \r\nplaceholder: '', // String|Array[String] 字符串或者数组\r\ndefaultValue: null, // String|Array[String] 默认值\r\nvalue: null,  // Array[String] 双向绑定值\r\nresult: [], // 校验结果\r\nresultRender: (resultItem, index) => { return Component}, // 检验结果显示组件render函数，\r\nonChange: (list) => {}, // 数据变更时调用函数\r\ndebounceSec: 500, // 校验间隔时间\r\ntokenSeparators: ['\\n'], // 自动分词的分隔符\r\n\r\n实例：\r\n<MultiLineVerificationTextarea\r\n  result={this.state.result} \r\n  onChange={this.onVerify.bind(this)}\r\n  defaultValue={this.state.editData.ip}\r\n  placeholder=\"请输入服务器IP\"\r\n  resultRender={this.onResultRander}\r\n  tokenSeparators={['\\n', ',', ';']}\r\n/>\r\n<MultiLineVerificationTextarea\r\n  result={this.state.result} \r\n  onChange={this.onVerify.bind(this)}\r\n  value={[]}\r\n  placeholder=\"请输入服务器IP\"\r\n  resultRender={this.onResultRander}\r\n/>\r\n*/\r\nimport React, { Component } from 'react';\r\nimport InputEx from '../InputEx/InputEx.jsx';\r\nimport _ from 'lodash';\r\nimport './MultiLineVerification.scss';\r\n\r\nconst TextAreaEx = InputEx.TextAreaEx;\r\n\r\nclass MultiLineVerification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let value = props.value || [];\r\n    if (props.defaultValue) {\r\n      value = _.isArray(props.defaultValue) ? props.defaultValue : props.defaultValue.split(/\\n/);\r\n    }\r\n    this.state = {\r\n      value,\r\n      result: props.result, // object[] [{}]\r\n    };\r\n  }\r\n\r\n  static defaultProps = {\r\n    className: '',\r\n    placeholder: '', // 字符串或者数组\r\n    defaultValue: null,\r\n    value: null,\r\n    result: [], // 校验结果\r\n    resultRender: (resultItem, index) => {}, // 检验结果render函数\r\n    onChange: (list) => {},\r\n    debounceSec: 500, // 校验间隔时间\r\n    tokenSeparators: ['\\n'], // 自动分词的分隔符\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (!_.isEqual(nextProps.result, this.props.result)) {\r\n      this.setState({\r\n        result: nextProps.result\r\n      });\r\n    }\r\n    if (!_.isEqual(nextProps.value, this.props.value)) {\r\n      this.setState({\r\n        value: nextProps.value\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  onVerify = _.debounce(function(list) {\r\n    this.props.onChange && this.props.onChange(list);\r\n  }, this.props.debounceSec);\r\n\r\n  onChange(e) {\r\n    let list = e.target.value.split(new RegExp(`${this.props.tokenSeparators.join('|')}`));\r\n    if (!this.props.value) {\r\n      this.setState({ value: list });\r\n    }\r\n    this.onVerify && this.onVerify(list);\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n\r\n    function Placeholder() {\r\n      let placeholderList = self.props.placeholder;\r\n      if (self.state.value.join() !== '') {\r\n        return null;\r\n      }\r\n      if (_.isString(placeholderList)) {\r\n        placeholderList = [placeholderList];\r\n      }\r\n      if (_.isArray(placeholderList)) {\r\n        return (\r\n          <div className=\"multi-line-placeholder-box\">\r\n            {placeholderList.map((x, i) => \r\n              <div className=\"multi-line-placeholder\" key={`mult-line-placeholder-${i}`}>{x}</div>\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={`nasa-multi-line-textarea ${this.props.className}`}>\r\n        <div className=\"multi-line-result\">\r\n          {this.state.value.map((x, i) => {\r\n            let tips = null;\r\n            if(this.state.result[i]){\r\n              tips = this.props.resultRender(this.state.result[i], i);\r\n            }\r\n            let className = ['multi-line-result-row'];\r\n            if(this.state.result[i] && this.state.result[i].focus === true){\r\n              className.push('red');\r\n            }\r\n            return (\r\n              <div className={className.join(' ')} key={i+'res'}>\r\n                <span className=\"text\">{x}</span>\r\n                <div className=\"multi-line-tooltip\">\r\n                  {tips}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <TextAreaEx \r\n          className=\"multi-line-edit\"\r\n          onChange={this.onChange.bind(this)}\r\n          value={this.state.value.join('\\n')}\r\n        />\r\n        <Placeholder />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MultiLineVerification;"]}