{"version":3,"sources":["../../src/Interval/index.jsx"],"names":["React","Component","_","moment","Interval","props","setText","time","second","text","render","interval","setState","state","nextProps","lastUpdate","countdownSecond","unix","countdown","minute","format","countdownFormat","setInterval","onTrigger","repeat","clearInterval","space","className","style","defaultProps","Math","round"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;AAaA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;;IAEqBC,Q;;;AACnB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oHACXA,KADW;;AAAA,UA6CnBC,OA7CmB,GA6CT,UAACC,IAAD,EAAOC,MAAP,EAAkB;AAC1B,UAAIC,OAAOF,IAAX;AACA,UAAI,MAAKF,KAAL,CAAWK,MAAf,EAAuB;AACrBD,eAAO,MAAKJ,KAAL,CAAWK,MAAX,CAAkBH,IAAlB,EAAwBC,MAAxB,EAAgC,MAAKH,KAAL,CAAWM,QAA3C,CAAP;AACD;AACD,YAAKC,QAAL,CAAc,EAAEH,UAAF,EAAd;AACD,KAnDkB;;AAEjB,UAAKI,KAAL,GAAa;AACXJ,YAAM;AADK,KAAb;AAFiB;AAKlB;;;;8CAayBK,S,EAAW,CAAE;;;wCAEnB;AAAA;;AAClB,WAAKC,UAAL,GAAkBZ,QAAlB;AACA,UAAIa,kBAAkB,KAAKX,KAAL,CAAWM,QAAX,IAAuBR,SAASc,IAAT,KAAkB,KAAKF,UAAL,CAAgBE,IAAhB,EAAzC,CAAtB;AACA,UAAIC,YAAYf,OAAO,EAAEgB,QAAQH,kBAAkB,EAA5B,EAAgCR,QAAQQ,kBAAkB,EAA1D,EAAP,CAAhB;AACA,WAAKV,OAAL,CAAaY,UAAUE,MAAV,CAAiB,KAAKf,KAAL,CAAWgB,eAA5B,CAAb,EAA2DL,eAA3D;;AAEA,WAAKL,QAAL,GAAgBW,YAAY,YAAM;AAChC,YAAIN,kBAAkB,OAAKX,KAAL,CAAWM,QAAX,IAAuBR,SAASc,IAAT,KAAkB,OAAKF,UAAL,CAAgBE,IAAhB,EAAzC,CAAtB;AACA,YAAIC,YAAYf,OAAO,EAAEgB,QAAQH,kBAAkB,EAA5B,EAAgCR,QAAQQ,kBAAkB,EAA1D,EAAP,CAAhB;AACA,eAAKV,OAAL,CAAaY,UAAUE,MAAV,CAAiB,OAAKf,KAAL,CAAWgB,eAA5B,CAAb,EAA2DL,eAA3D;AACA,YAAIA,mBAAmB,CAAvB,EAA0B;AACxB,iBAAKD,UAAL,GAAkBZ,QAAlB;AACA,iBAAKE,KAAL,CAAWkB,SAAX,IAAwB,OAAKlB,KAAL,CAAWkB,SAAX,EAAxB;AACA;AACA,cAAI,OAAKlB,KAAL,CAAWmB,MAAX,KAAsB,KAA1B,EAAiC;AAC/BC,0BAAc,OAAKd,QAAnB;AACD;AACF;AACF,OAZe,EAYb,KAAKN,KAAL,CAAWqB,KAAX,GAAmB,IAZN,CAAhB;AAaD;;;2CAEsB;AACrBD,oBAAc,KAAKd,QAAnB;AACD;;;6BAUQ;AACP,aACE;AAAA;AAAA,UAAM,WAAW,KAAKN,KAAL,CAAWsB,SAA5B,EAAuC,OAAO,KAAKtB,KAAL,CAAWuB,KAAzD;AAAiE,aAAKf,KAAL,CAAWJ;AAA5E,OADF;AAGD;;;;EA1DmCR,S;;AAAjBG,Q,CAQZyB,Y,GAAe;AACpBF,aAAW,IADS;AAEpBC,SAAO,IAFa;AAGpBjB,YAAU,GAHU,EAGL;AACfe,SAAO,CAJa,EAIV;AACVhB,UAAQ,gBAACH,IAAD,EAAOC,MAAP,EAAeG,QAAf;AAAA,sBAAgCmB,KAAKC,KAAL,CAAWpB,WAAW,EAAtB,CAAhC,kDAAmEJ,IAAnE;AAAA,GALY,EAKkE;AACtFgB,aAAW,IANS,EAMH;AACjBC,UAAQ,IAPY,EAON;AACdH,mBAAiB,OARG,CAQM;AARN,C;eARHjB,Q","file":"index.js","sourcesContent":["/*\r\n 定时器\r\n\r\n <Interval onTrigger={()=> console.log('Interval Trigger')} />\r\n\r\n <Interval \r\n  interval={60} \r\n  space={2} \r\n  render={(time, second) => `自定义显示:${time}，秒：${second}`} \r\n  repeat={false}\r\n  onTrigger={()=> console.log('Interval Trigger')}\r\n />\r\n */\r\nimport React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport default class Interval extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: ''\r\n    };\r\n  }\r\n\r\n  static defaultProps = {\r\n    className: null,\r\n    style: null,\r\n    interval: 600, // 定时多久后进行校验 默认10分钟\r\n    space: 1, // 间隔多久校验一次，默认1秒\r\n    render: (time, second, interval) => `每${Math.round(interval / 60)}分钟更新一次，${time}后更新`, // 每次校验时执行函数，参数为倒计时字符串 (time, second) => time\r\n    onTrigger: null, // 倒计时最后执行函数\r\n    repeat: true, // 是否循环\r\n    countdownFormat: 'mm:ss', // 倒计时格式化\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {}\r\n\r\n  componentDidMount() {\r\n    this.lastUpdate = moment();\r\n    let countdownSecond = this.props.interval - (moment().unix() - this.lastUpdate.unix());\r\n    let countdown = moment({ minute: countdownSecond / 60, second: countdownSecond % 60 });\r\n    this.setText(countdown.format(this.props.countdownFormat), countdownSecond);\r\n\r\n    this.interval = setInterval(() => {\r\n      let countdownSecond = this.props.interval - (moment().unix() - this.lastUpdate.unix());\r\n      let countdown = moment({ minute: countdownSecond / 60, second: countdownSecond % 60 });\r\n      this.setText(countdown.format(this.props.countdownFormat), countdownSecond);\r\n      if (countdownSecond <= 0) {\r\n        this.lastUpdate = moment();\r\n        this.props.onTrigger && this.props.onTrigger();\r\n        // 移除定时器\r\n        if (this.props.repeat === false) {\r\n          clearInterval(this.interval);\r\n        }\r\n      }\r\n    }, this.props.space * 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  setText = (time, second) => {\r\n    let text = time;\r\n    if (this.props.render) {\r\n      text = this.props.render(time, second, this.props.interval);\r\n    }\r\n    this.setState({ text });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span className={this.props.className} style={this.props.style}>{this.state.text}</span>\r\n    )\r\n  }\r\n}"]}